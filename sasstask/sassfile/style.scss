* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

// Mixin for links 
@mixin at($color: black) {
    color: $color;
    text-decoration: none;
    cursor: pointer;
}

//Mixin for flex
@mixin fl($dir: row, $gr: 0, $sh: 0, $bas: 0) {
    display: flex;
    flex-direction: $dir;
    flex: $gr $sh $bas;
}

//Mixin for grid with same amount of size
@mixin griss($dir: columns, $gp: 0, $blo: 1) {
    display: grid;
    grid-gap: $gp;
    grid-template-#{$dir}: repeat($blo, 1fr);
}

//Mixin for grid with different size of the block
@mixin grids($dir: columns, $gp: 0, $size...) {
    display: grid;
    grid-gap: $gp;

    $st: '';

    @for $i from 0 to length($size) {
        $st: #{nth($size, $i + 1)};
    }

    grid-template-#{$dir}: $st;
}


//Mixin for button
@mixin button($color, $red) {
    display: inline-block;
    border-radius: $red;
    cursor: pointer;
    align-self: center;
    @include backc(($color));
    @include pad(10px, 20px);
    @include mar(1rem, 0);
    @include hw(40px, 90px);
    @include tran(all, 1s, ease-in);

    &:hover {
        @include hw(50px, 100px);
    }
}

//Mixin for height width
@mixin hw($height: 0, $width: 0) {
    height: $height;
    width: $width;
}

// Mixin for margin
@mixin mar($tb: 0, $lr: 0) {
    margin: $tb $lr;
}

// Mixin for padding
@mixin pad($tb: 0, $lr: 0) {
    padding: $tb $lr;
}

//Mixin for color
@mixin backc($color: white) {
    background-color: $color;
}

//Mixin for transition
@mixin tran($val, $dur, $ttf: linear) {
    transition: $val $dur $ttf;
}



.out {
    @include griss(columns, 10px, 3);

    &+div {
        @include mar(10px, 50px);
        @include hw(200px, 300px);
    }
}

.in {
    @include backc(lightblue);
    @include pad(10px, 20px);
    @include fl(column);
    text-align: center;
}

a {
    @include at(red);
}

.btn {
    @include button(yellow, 5px);
}